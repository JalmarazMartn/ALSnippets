{
	"AL Notification": {
		"prefix": "TNotification",
		"body": [
			"codeunit $CodeunitId \"$CodeunitName\"\r",
			"{\r",
			"    Permissions = TableData \"My Notifications\" = rimd;\r",
			"\r",
			"    var\r",
			"\r",
			"        NotificationMsg: TextConst ENU = 'Display this message when Notification is raised';\r",
			"        DetailsTxt: Label 'Show details';\r",
			"        NotificationTxt: TextConst ENU = 'Short description for My Notifications Page';\r",
			"        NotificationDescriptionTxt: TextConst ENU = 'Long description for My Notifications Page';\r",
			"\r",
			"\r",
			"    procedure ${TableToCheck}Check($TableToCheck: Record \"$TableToCheckName\") Rollback: Boolean;\r",
			"    var\r",
			"        NotificationLifecycleMgt: Codeunit \"Notification Lifecycle Mgt.\";\r",
			"    begin\r",
			"        //This funtion begins all the notification Cycle.\r",
			"        //Could be invoked from a subscription  or new table validation.\r",
			"        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(\r",
			"                                $TableToCheck.RECORDID, GetNotificationId, TRUE);\r",
			"\r",
			"        IF ShowWarning($TableToCheck) THEN\r",
			"            Rollback := CreateAndSendNotification($TableToCheck.\"$Field1\", $TableToCheck.\"$Field2\", $TableToCheck.RecordId);\r",
			"    end;\r",
			"\r",
			"    local procedure CreateAndSendNotification($FieldVar1: Code[20]; $FieldVar2: Code[20]; RecordId: RecordId): Boolean\r",
			"    var\r",
			"        RealeasedNotification: Notification;\r",
			"        NotificationLifecycleMgt: Codeunit \"Notification Lifecycle Mgt.\";\r",
			"    begin\r",
			"        RealeasedNotification.ID(GetNotificationId());\r",
			"        RealeasedNotification.MESSAGE(STRSUBSTNO(NotificationMsg, $FieldVar1, $FieldVar2));\r",
			"        RealeasedNotification.SCOPE(NOTIFICATIONSCOPE::LocalScope);\r",
			"        RealeasedNotification.ADDACTION(DetailsTxt, CODEUNIT::\"$CodeunitName\", 'ShowNotificationDetails');\r",
			"        PopulateDataOnNotification(RealeasedNotification, $FieldVar1, $FieldVar2);\r",
			"        NotificationLifecycleMgt.SendNotificationWithAdditionalContext(RealeasedNotification, RecordId, GetNotificationId);\r",
			"        EXIT(FALSE);\r",
			"\r",
			"    end;\r",
			"\r",
			"    local procedure GetNotificationId(): Text\r",
			"    begin\r",
			"        //Here returns a hard-coded GUID. You can get a GUID in many web pages as: \r",
			"        //https://www.guidgenerator.com/online-guid-generator.aspx\r",
			"        exit('$GUID');\r",
			"    end;\r",
			"\r",
			"    local procedure IsNotificationEnabled($MasterTable: Record $MasterTable): Boolean\r",
			"    var\r",
			"        MyNotifications: Record \"My Notifications\";\r",
			"    begin\r",
			"        EXIT(MyNotifications.IsEnabledForRecord(GetNotificationId, $MasterTable));\r",
			"    end;\r",
			"\r",
			"    [EventSubscriber(ObjectType::Page, Page::\"My Notifications\", 'OnInitializingNotificationWithDefaultState', '', true, true)]\r",
			"    local procedure OnInitializingNotificationWithDefaultState()\r",
			"    var\r",
			"        MyNotifications: Record \"My Notifications\";\r",
			"    begin\r",
			"        //This function make visible the personal notification in My Notifications\r",
			"        MyNotifications.InsertDefaultWithTableNum(GetNotificationId,\r",
			"        NotificationTxt,\r",
			"        NotificationDescriptionTxt,\r",
			"        DATABASE::$MasterTable);\r",
			"    end;\r",
			"\r",
			"    local procedure ShowWarning($TableToCheck: Record \"$TableToCheckName\"): Boolean\r",
			"    var\r",
			"        $MasterTable: Record $MasterTable;\r",
			"    begin\r",
			"        //This funtion performs check code.\r",
			"        if not GuiAllowed then\r",
			"            exit;\r",
			"        if not $MasterTable.get($TableToCheck.\"$Field1\") then\r",
			"            exit;\r",
			"        if not IsNotificationEnabled($MasterTable) then\r",
			"            exit;\r",
			"    end;\r",
			"\r",
			"    procedure ShowNotificationDetails(ReleasedNotification: Notification)\r",
			"    var\r",
			"        $DetailsPage: Page \"$DetailsPageName\";\r",
			"    begin\r",
			"        //This function opens a Page if user ask for details \r",
			"        $DetailsPage.InitializeFromNotification(ReleasedNotification);\r",
			"        $DetailsPage.RUNMODAL;\r",
			"    end;\r",
			"\r",
			"    local procedure PopulateDataOnNotification(var ReleasedNotification: Notification; $FieldVar1: code[20]; $FieldVar2: Code[20])\r",
			"    begin\r",
			"        //The pattern shows us to put this function in details Page but makes little sense.\r",
			"        //I though better here, for modifying an smaller object set. \r",
			"        with ReleasedNotification do begin\r",
			"            SetData('$FieldVar1', $FieldVar1);\r",
			"            SetData('$FieldVar2', $FieldVar2);\r",
			"        end;\r",
			"\r",
			"    end;\r",
			"\r",
			"}",			
			"//Paste this code bellow in another extension file:page or page extension\r",
			"pageextension XXXXX \"$DetailsPageName EXT\" extends \"$DetailsPageName\"\r",
			"{\r",
			"    procedure InitializeFromNotification(ReleasedNotification: Notification)\r",
			"    begin\r",
			"    end;\r",
			"}",
		],
		"description": "Implements AL Notification"
	}
}